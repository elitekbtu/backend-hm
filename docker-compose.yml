services:
  # Backend Service (FastAPI)
  backend:
    build:
      context: ./backend
    user: appuser
    container_name: backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend/app:/app/app
    command:
      [
        "uvicorn",
        "app.main:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8000",
        "--reload",
      ]
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/mydatabase
    restart: unless-stopped
    env_file:
      - .env

  # Frontend Service (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: unless-stopped

  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    container_name: db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=mydatabase
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydatabase"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Service
  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Celery Worker
  worker:
    build:
      context: ./backend
    user: appuser
    container_name: worker
    command:
      ["celery", "-A", "app.tasks.celery", "worker", "-B", "--loglevel=info"]
    volumes:
      - ./backend/app:/app/app
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/mydatabase
    env_file:
      - .env

volumes:
  postgres_data:
